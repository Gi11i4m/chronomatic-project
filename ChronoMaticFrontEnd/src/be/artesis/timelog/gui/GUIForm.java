package be.artesis.timelog.gui;

import be.artesis.timelog.clock.Clock;
import be.artesis.timelog.controller.Deleter;
import be.artesis.timelog.controller.Updater;
import be.artesis.timelog.model.Validator;
import be.artesis.timelog.model.WebserviceException;
import be.artesis.timelog.view.DataInputException;
import be.artesis.timelog.view.Opdrachtgever;
import be.artesis.timelog.view.Project;
import be.artesis.timelog.view.Taak;
import be.artesis.timelog.view.Tijdspanne;
import java.awt.Color;
import java.awt.Component;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 * @author Gilliam
 */
public class GUIForm extends javax.swing.JFrame {

    LoginDialog login;
    Validator validator;
    ArrayList<JList> tasklists;

    public GUIForm() {
        validator = Validator.getInstance();
        login = new LoginDialog(this, true, validator);
        login.setVisible(true);
        initComponents();
        getContentPane().setBackground(Color.darkGray);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JTabbedPane = new javax.swing.JTabbedPane();
        homeJPanel = new javax.swing.JPanel();
        homeJLabel = new javax.swing.JLabel();
        workJButton = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        homeProjectsJList = new javax.swing.JList();
        HomeProjectsJLabel = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        homeTasksJList = new javax.swing.JList();
        TasksJLabel = new javax.swing.JLabel();
        projectsJPanel = new javax.swing.JPanel();
        projectsJLabel = new javax.swing.JLabel();
        addProjectJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        projectsJList = new javax.swing.JList();
        clientJLabel = new javax.swing.JLabel();
        setCurrentProjectJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        projectTasksJList = new javax.swing.JList();
        namecompJLabel = new javax.swing.JLabel();
        startdatecompJLabel = new javax.swing.JLabel();
        enddatecompJLabel1 = new javax.swing.JLabel();
        taskscompJLabel = new javax.swing.JLabel();
        clientcompJLabel1 = new javax.swing.JLabel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        nameJTextField = new javax.swing.JTextField();
        startdateJTextField = new javax.swing.JTextField();
        enddateJTextField = new javax.swing.JTextField();
        saveProjectJButton = new javax.swing.JButton();
        removeProjectJButton = new javax.swing.JButton();
        percentageCompleteJProgressBar = new javax.swing.JProgressBar();
        percentageCompletecompJLabel = new javax.swing.JLabel();
        tasksJPanel = new javax.swing.JPanel();
        tasksJLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tasksJList = new javax.swing.JList();
        tasknameCompJLabel = new javax.swing.JLabel();
        taskstartdateCompJLabel = new javax.swing.JLabel();
        taskenddateCompJLabel = new javax.swing.JLabel();
        taskCommentCompJLabel = new javax.swing.JLabel();
        taskCompletedJLabel = new javax.swing.JLabel();
        addTaskJButton = new javax.swing.JButton();
        taskCompletedJCheckBox = new javax.swing.JCheckBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        taskCommentJTextArea = new javax.swing.JTextArea();
        taskNameJTextField = new javax.swing.JTextField();
        taskStartdateJTextField = new javax.swing.JTextField();
        taskEnddateJTextField = new javax.swing.JTextField();
        saveTaskJButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        workedTimeJList = new javax.swing.JList();
        taskTotalPauseCompJLabel = new javax.swing.JLabel();
        taskTotalTimeCompJLabel = new javax.swing.JLabel();
        removeTaskJButton = new javax.swing.JButton();
        taskWorkedTimeCompJLabel = new javax.swing.JLabel();
        scheduleJPanel = new javax.swing.JPanel();
        scheduleJLabel = new javax.swing.JLabel();
        clientsJPanel = new javax.swing.JPanel();
        clientsJLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        clientsJList = new javax.swing.JList();
        addClientJButton = new javax.swing.JButton();
        clientNameJTextField = new javax.swing.JTextField();
        clientFirstNameJTextField = new javax.swing.JTextField();
        clientCompanyJTextField = new javax.swing.JTextField();
        clientEmailJTextField = new javax.swing.JTextField();
        clientPhoneNumberJTextField = new javax.swing.JTextField();
        nameJLabel = new javax.swing.JLabel();
        firstNameJLabel = new javax.swing.JLabel();
        companyJLabel = new javax.swing.JLabel();
        emailJLabel = new javax.swing.JLabel();
        phoneNumberJLabel = new javax.swing.JLabel();
        saveClientJButton = new javax.swing.JButton();
        removeClientJButton = new javax.swing.JButton();
        optionsJPanel = new javax.swing.JPanel();
        settingsJLabel = new javax.swing.JLabel();
        headerJPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        ingelogdJLabel = new javax.swing.JLabel();
        currentProjectJLabel = new javax.swing.JLabel();
        clockJLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Time Management System");
        setBackground(new java.awt.Color(51, 51, 51));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(new java.awt.Color(51, 51, 51));
        setIconImages(null);
        setMaximumSize(new java.awt.Dimension(2000, 2000));
        setName("guiFrame"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                guiOpened(evt);
            }
        });

        JTabbedPane.setBackground(new java.awt.Color(51, 51, 51));
        JTabbedPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        JTabbedPane.setName(""); // NOI18N
        JTabbedPane.setNextFocusableComponent(scheduleJPanel);

        homeJPanel.setBackground(new java.awt.Color(153, 153, 153));
        homeJPanel.setForeground(new java.awt.Color(65, 152, 134));
        homeJPanel.setToolTipText("");
        homeJPanel.setNextFocusableComponent(scheduleJPanel);

        homeJLabel.setFont(new java.awt.Font("Tw Cen MT", 1, 14)); // NOI18N
        homeJLabel.setForeground(new java.awt.Color(255, 255, 255));
        homeJLabel.setText("Home");

        workJButton.setBackground(new java.awt.Color(14, 196, 188));
        workJButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        workJButton.setForeground(new java.awt.Color(204, 204, 204));
        workJButton.setText("Work");
        workJButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                workClicked(evt);
            }
        });

        homeProjectsJList.setToolTipText("Press enter to set the current project");
        homeProjectsJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                homeProjectsJListValueChanged(evt);
            }
        });
        homeProjectsJList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                homeProjectsJListKeyReleased(evt);
            }
        });
        jScrollPane7.setViewportView(homeProjectsJList);

        HomeProjectsJLabel.setFont(new java.awt.Font("Tw Cen MT", 1, 14)); // NOI18N
        HomeProjectsJLabel.setForeground(new java.awt.Color(0, 153, 153));
        HomeProjectsJLabel.setText("Projects");

        jScrollPane8.setViewportView(homeTasksJList);

        TasksJLabel.setFont(new java.awt.Font("Tw Cen MT", 1, 14)); // NOI18N
        TasksJLabel.setForeground(new java.awt.Color(0, 153, 153));
        TasksJLabel.setText("Tasks");

        javax.swing.GroupLayout homeJPanelLayout = new javax.swing.GroupLayout(homeJPanel);
        homeJPanel.setLayout(homeJPanelLayout);
        homeJPanelLayout.setHorizontalGroup(
            homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homeJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(workJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
                    .addGroup(homeJPanelLayout.createSequentialGroup()
                        .addGroup(homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(homeJLabel)
                            .addGroup(homeJPanelLayout.createSequentialGroup()
                                .addGroup(homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(HomeProjectsJLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TasksJLabel)
                                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        homeJPanelLayout.setVerticalGroup(
            homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homeJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(homeJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(workJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HomeProjectsJLabel)
                    .addComponent(TasksJLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(homeJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addComponent(jScrollPane7))
                .addContainerGap())
        );

        JTabbedPane.addTab("", new javax.swing.ImageIcon(getClass().getResource("/be/artesis/timelog/gui/icons/HomeNeonIcon.png")), homeJPanel, "Home"); // NOI18N

        projectsJPanel.setBackground(new java.awt.Color(153, 153, 153));

        projectsJLabel.setFont(new java.awt.Font("Tw Cen MT", 1, 14)); // NOI18N
        projectsJLabel.setForeground(new java.awt.Color(255, 255, 255));
        projectsJLabel.setText("Projects");

        addProjectJButton.setText("Add Project");
        addProjectJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProjectJButtonActionPerformed(evt);
            }
        });

        projectsJList.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        projectsJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        projectsJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                projectsJListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(projectsJList);

        clientJLabel.setBackground(new java.awt.Color(204, 255, 255));
        clientJLabel.setForeground(new java.awt.Color(255, 255, 255));
        clientJLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        clientJLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clientJLabel.setMaximumSize(null);
        clientJLabel.setMinimumSize(new java.awt.Dimension(34, 20));
        clientJLabel.setName(""); // NOI18N
        clientJLabel.setPreferredSize(new java.awt.Dimension(34, 20));

        setCurrentProjectJButton.setText("Set as current project");
        setCurrentProjectJButton.setEnabled(false);
        setCurrentProjectJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setCurrentProjectJButtonActionPerformed(evt);
            }
        });

        projectTasksJList.setBackground(new java.awt.Color(102, 102, 102));
        projectTasksJList.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        projectTasksJList.setForeground(new java.awt.Color(204, 204, 204));
        projectTasksJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        projectTasksJList.setToolTipText("");
        projectTasksJList.setEnabled(false);
        jScrollPane2.setViewportView(projectTasksJList);

        namecompJLabel.setForeground(new java.awt.Color(255, 255, 255));
        namecompJLabel.setText("Naam");

        startdatecompJLabel.setForeground(new java.awt.Color(255, 255, 255));
        startdatecompJLabel.setText("Start date");

        enddatecompJLabel1.setForeground(new java.awt.Color(255, 255, 255));
        enddatecompJLabel1.setText("End date");

        taskscompJLabel.setForeground(new java.awt.Color(255, 255, 255));
        taskscompJLabel.setText("Tasks");

        clientcompJLabel1.setForeground(new java.awt.Color(255, 255, 255));
        clientcompJLabel1.setText("Client");

        nameJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editFieldsFocused(evt);
            }
        });

        startdateJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editFieldsFocused(evt);
            }
        });

        enddateJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editFieldsFocused(evt);
            }
        });

        saveProjectJButton.setText("Save");
        saveProjectJButton.setEnabled(false);
        saveProjectJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProjectJButtonActionPerformed(evt);
            }
        });

        removeProjectJButton.setText("Remove project");
        removeProjectJButton.setEnabled(false);
        removeProjectJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeProjectJButtonActionPerformed(evt);
            }
        });

        percentageCompletecompJLabel.setForeground(new java.awt.Color(255, 255, 255));
        percentageCompletecompJLabel.setText("Complete");

        javax.swing.GroupLayout projectsJPanelLayout = new javax.swing.GroupLayout(projectsJPanel);
        projectsJPanel.setLayout(projectsJPanelLayout);
        projectsJPanelLayout.setHorizontalGroup(
            projectsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(projectsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(projectsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(projectsJPanelLayout.createSequentialGroup()
                        .addGroup(projectsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(removeProjectJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                            .addComponent(setCurrentProjectJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(projectsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(projectsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, projectsJPanelLayout.createSequentialGroup()
                                    .addGap(32, 32, 32)
                                    .addComponent(clientcompJLabel1))
                                .addGroup(projectsJPanelLayout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(projectsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(namecompJLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(startdatecompJLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(enddatecompJLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(taskscompJLabel, javax.swing.GroupLayout.Alignment.TRAILING))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, projectsJPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(percentageCompletecompJLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(projectsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(saveProjectJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                            .addComponent(clientJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(startdateJTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                            .addComponent(enddateJTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                            .addComponent(nameJTextField)
                            .addComponent(percentageCompleteJProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(projectsJPanelLayout.createSequentialGroup()
                        .addComponent(projectsJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addProjectJButton)))
                .addContainerGap())
        );
        projectsJPanelLayout.setVerticalGroup(
            projectsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(projectsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(projectsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addProjectJButton)
                    .addComponent(projectsJLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(projectsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(projectsJPanelLayout.createSequentialGroup()
                        .addGroup(projectsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(namecompJLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(projectsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startdatecompJLabel)
                            .addComponent(startdateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(projectsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(enddatecompJLabel1)
                            .addComponent(enddateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(projectsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(projectsJPanelLayout.createSequentialGroup()
                                .addGroup(projectsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(taskscompJLabel)
                                    .addGroup(projectsJPanelLayout.createSequentialGroup()
                                        .addGap(152, 152, 152)
                                        .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(32, 32, 32))
                            .addGroup(projectsJPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(projectsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clientJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clientcompJLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(projectsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(percentageCompletecompJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                            .addComponent(percentageCompleteJProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveProjectJButton))
                    .addGroup(projectsJPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeProjectJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setCurrentProjectJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        JTabbedPane.addTab("", new javax.swing.ImageIcon(getClass().getResource("/be/artesis/timelog/gui/icons/ProjectsNeonIcon.png")), projectsJPanel, "Projects"); // NOI18N

        tasksJPanel.setBackground(new java.awt.Color(153, 153, 153));

        tasksJLabel.setFont(new java.awt.Font("Tw Cen MT", 1, 14)); // NOI18N
        tasksJLabel.setForeground(new java.awt.Color(255, 255, 255));
        tasksJLabel.setText("Tasks");

        tasksJList.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tasksJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        tasksJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                tasksJListprojectListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(tasksJList);

        tasknameCompJLabel.setForeground(new java.awt.Color(255, 255, 255));
        tasknameCompJLabel.setText("Name");

        taskstartdateCompJLabel.setForeground(new java.awt.Color(255, 255, 255));
        taskstartdateCompJLabel.setText("Start date");

        taskenddateCompJLabel.setForeground(new java.awt.Color(255, 255, 255));
        taskenddateCompJLabel.setText("End date");

        taskCommentCompJLabel.setForeground(new java.awt.Color(255, 255, 255));
        taskCommentCompJLabel.setText("Comment");

        taskCompletedJLabel.setForeground(new java.awt.Color(255, 255, 255));
        taskCompletedJLabel.setText("Completed");

        addTaskJButton.setText("Add Task to current Project");
        addTaskJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTaskJButtonActionPerformed(evt);
            }
        });

        taskCompletedJCheckBox.setBackground(tasksJPanel.getBackground());
        taskCompletedJCheckBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editFieldsFocused(evt);
            }
        });

        taskCommentJTextArea.setColumns(20);
        taskCommentJTextArea.setRows(4);
        taskCommentJTextArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editFieldsFocused(evt);
            }
        });
        jScrollPane4.setViewportView(taskCommentJTextArea);

        taskNameJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editFieldsFocused(evt);
            }
        });

        taskStartdateJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editFieldsFocused(evt);
            }
        });

        taskEnddateJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editFieldsFocused(evt);
            }
        });

        saveTaskJButton.setText("Save");
        saveTaskJButton.setEnabled(false);
        saveTaskJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTaskJButtonActionPerformed(evt);
            }
        });

        workedTimeJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        workedTimeJList.setEnabled(false);
        jScrollPane6.setViewportView(workedTimeJList);

        taskTotalPauseCompJLabel.setForeground(new java.awt.Color(240, 240, 240));
        taskTotalPauseCompJLabel.setToolTipText("");

        taskTotalTimeCompJLabel.setForeground(new java.awt.Color(240, 240, 240));

        removeTaskJButton.setText("Remove task");
        removeTaskJButton.setEnabled(false);
        removeTaskJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeTaskJButtonActionPerformed(evt);
            }
        });

        taskWorkedTimeCompJLabel.setForeground(new java.awt.Color(255, 255, 255));
        taskWorkedTimeCompJLabel.setText("Worked time");

        javax.swing.GroupLayout tasksJPanelLayout = new javax.swing.GroupLayout(tasksJPanel);
        tasksJPanel.setLayout(tasksJPanelLayout);
        tasksJPanelLayout.setHorizontalGroup(
            tasksJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tasksJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tasksJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tasksJPanelLayout.createSequentialGroup()
                        .addComponent(tasksJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addTaskJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tasksJPanelLayout.createSequentialGroup()
                        .addGroup(tasksJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                            .addComponent(removeTaskJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(tasksJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tasksJPanelLayout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addGroup(tasksJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(taskstartdateCompJLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(taskenddateCompJLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(taskCommentCompJLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(tasknameCompJLabel, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tasksJPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(taskWorkedTimeCompJLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tasksJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addComponent(taskNameJTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(tasksJPanelLayout.createSequentialGroup()
                                .addGroup(tasksJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(taskStartdateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(taskEnddateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(taskCompletedJLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(taskCompletedJCheckBox)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(saveTaskJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(taskTotalTimeCompJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(taskTotalPauseCompJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE))))
                .addContainerGap())
        );
        tasksJPanelLayout.setVerticalGroup(
            tasksJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tasksJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tasksJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tasksJLabel)
                    .addComponent(addTaskJButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tasksJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(tasksJPanelLayout.createSequentialGroup()
                        .addGroup(tasksJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(taskNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tasknameCompJLabel))
                        .addGroup(tasksJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tasksJPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(tasksJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(taskStartdateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(taskstartdateCompJLabel)
                                    .addGroup(tasksJPanelLayout.createSequentialGroup()
                                        .addGap(26, 26, 26)
                                        .addGroup(tasksJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(taskEnddateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(taskenddateCompJLabel)))))
                            .addGroup(tasksJPanelLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(tasksJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(taskCompletedJCheckBox)
                                    .addComponent(taskCompletedJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tasksJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                            .addGroup(tasksJPanelLayout.createSequentialGroup()
                                .addComponent(taskCommentCompJLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tasksJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(taskWorkedTimeCompJLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(taskTotalPauseCompJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(taskTotalTimeCompJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tasksJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveTaskJButton)
                    .addComponent(removeTaskJButton))
                .addContainerGap())
        );

        JTabbedPane.addTab("", new javax.swing.ImageIcon(getClass().getResource("/be/artesis/timelog/gui/icons/TasksNeonIcon.png")), tasksJPanel, "Tasks"); // NOI18N

        scheduleJPanel.setBackground(new java.awt.Color(153, 153, 153));

        scheduleJLabel.setFont(new java.awt.Font("Tw Cen MT", 1, 14)); // NOI18N
        scheduleJLabel.setForeground(new java.awt.Color(255, 255, 255));
        scheduleJLabel.setText("Schedule");

        javax.swing.GroupLayout scheduleJPanelLayout = new javax.swing.GroupLayout(scheduleJPanel);
        scheduleJPanel.setLayout(scheduleJPanelLayout);
        scheduleJPanelLayout.setHorizontalGroup(
            scheduleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scheduleJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scheduleJLabel)
                .addContainerGap(621, Short.MAX_VALUE))
        );
        scheduleJPanelLayout.setVerticalGroup(
            scheduleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scheduleJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scheduleJLabel)
                .addContainerGap(369, Short.MAX_VALUE))
        );

        JTabbedPane.addTab("", new javax.swing.ImageIcon(getClass().getResource("/be/artesis/timelog/gui/icons/CalendarNeonIcon.png")), scheduleJPanel, "Schedule"); // NOI18N

        clientsJPanel.setBackground(new java.awt.Color(153, 153, 153));

        clientsJLabel.setFont(new java.awt.Font("Tw Cen MT", 1, 14)); // NOI18N
        clientsJLabel.setForeground(new java.awt.Color(255, 255, 255));
        clientsJLabel.setText("Clients");

        clientsJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        clientsJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                clientsJListValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(clientsJList);

        addClientJButton.setText("Add Client");
        addClientJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addClientJButtonActionPerformed(evt);
            }
        });

        clientNameJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editFieldsFocused(evt);
            }
        });

        clientFirstNameJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editFieldsFocused(evt);
            }
        });

        clientCompanyJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editFieldsFocused(evt);
            }
        });

        clientEmailJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editFieldsFocused(evt);
            }
        });

        clientPhoneNumberJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                editFieldsFocused(evt);
            }
        });

        nameJLabel.setForeground(new java.awt.Color(255, 255, 255));
        nameJLabel.setText("Name");

        firstNameJLabel.setForeground(new java.awt.Color(255, 255, 255));
        firstNameJLabel.setText("First name");

        companyJLabel.setForeground(new java.awt.Color(255, 255, 255));
        companyJLabel.setText("Company");

        emailJLabel.setForeground(new java.awt.Color(255, 255, 255));
        emailJLabel.setText("E-mail");

        phoneNumberJLabel.setForeground(new java.awt.Color(255, 255, 255));
        phoneNumberJLabel.setText("Phone number");

        saveClientJButton.setText("Save");
        saveClientJButton.setEnabled(false);
        saveClientJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveClientJButtonActionPerformed(evt);
            }
        });

        removeClientJButton.setText("Remove client");
        removeClientJButton.setEnabled(false);
        removeClientJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeClientJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout clientsJPanelLayout = new javax.swing.GroupLayout(clientsJPanel);
        clientsJPanel.setLayout(clientsJPanelLayout);
        clientsJPanelLayout.setHorizontalGroup(
            clientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(clientsJPanelLayout.createSequentialGroup()
                        .addGroup(clientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                            .addComponent(removeClientJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(clientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nameJLabel)
                            .addComponent(firstNameJLabel)
                            .addComponent(companyJLabel)
                            .addComponent(emailJLabel)
                            .addComponent(phoneNumberJLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(clientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clientFirstNameJTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(clientCompanyJTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(clientEmailJTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(clientPhoneNumberJTextField)
                            .addComponent(clientNameJTextField)
                            .addComponent(saveClientJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)))
                    .addGroup(clientsJPanelLayout.createSequentialGroup()
                        .addComponent(clientsJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addClientJButton)))
                .addContainerGap())
        );
        clientsJPanelLayout.setVerticalGroup(
            clientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clientsJLabel)
                    .addComponent(addClientJButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(clientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(clientsJPanelLayout.createSequentialGroup()
                        .addGroup(clientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clientNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameJLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(clientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clientFirstNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firstNameJLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(clientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clientCompanyJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(companyJLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(clientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clientEmailJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(emailJLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(clientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clientPhoneNumberJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(phoneNumberJLabel))
                        .addGap(0, 167, Short.MAX_VALUE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(clientsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(saveClientJButton)
                    .addComponent(removeClientJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        JTabbedPane.addTab("", new javax.swing.ImageIcon(getClass().getResource("/be/artesis/timelog/gui/icons/ClientsNeonIcon.png")), clientsJPanel, "Clients"); // NOI18N

        optionsJPanel.setBackground(new java.awt.Color(153, 153, 153));

        settingsJLabel.setFont(new java.awt.Font("Tw Cen MT", 1, 14)); // NOI18N
        settingsJLabel.setForeground(new java.awt.Color(255, 255, 255));
        settingsJLabel.setText("Settings");

        javax.swing.GroupLayout optionsJPanelLayout = new javax.swing.GroupLayout(optionsJPanel);
        optionsJPanel.setLayout(optionsJPanelLayout);
        optionsJPanelLayout.setHorizontalGroup(
            optionsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(settingsJLabel)
                .addContainerGap(627, Short.MAX_VALUE))
        );
        optionsJPanelLayout.setVerticalGroup(
            optionsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(settingsJLabel)
                .addContainerGap(369, Short.MAX_VALUE))
        );

        JTabbedPane.addTab("", new javax.swing.ImageIcon(getClass().getResource("/be/artesis/timelog/gui/icons/SettingsNeonIcon.png")), optionsJPanel, "Settings"); // NOI18N

        headerJPanel.setBackground(new java.awt.Color(64, 64, 64));

        titleLabel.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setText("ChronoMatic");

        ingelogdJLabel.setBackground(new java.awt.Color(255, 255, 255));
        ingelogdJLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ingelogdJLabel.setForeground(new java.awt.Color(255, 0, 0));
        ingelogdJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ingelogdJLabel.setText("Not logged in");
        ingelogdJLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        ingelogdJLabel.setName(""); // NOI18N
        ingelogdJLabel.setOpaque(true);

        currentProjectJLabel.setBackground(new java.awt.Color(255, 255, 255));
        currentProjectJLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        currentProjectJLabel.setForeground(new java.awt.Color(0, 204, 204));
        currentProjectJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        currentProjectJLabel.setText("Current project: ...");
        currentProjectJLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        currentProjectJLabel.setName(""); // NOI18N
        currentProjectJLabel.setOpaque(true);

        clockJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/be/artesis/timelog/gui/icons/ClockNeonIcon.png"))); // NOI18N

        javax.swing.GroupLayout headerJPanelLayout = new javax.swing.GroupLayout(headerJPanel);
        headerJPanel.setLayout(headerJPanelLayout);
        headerJPanelLayout.setHorizontalGroup(
            headerJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(headerJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(currentProjectJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                    .addComponent(ingelogdJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(titleLabel)
                .addGap(18, 18, 18)
                .addComponent(clockJLabel)
                .addGap(6, 6, 6))
        );
        headerJPanelLayout.setVerticalGroup(
            headerJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(headerJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clockJLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(headerJPanelLayout.createSequentialGroup()
                        .addComponent(ingelogdJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(currentProjectJLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        clockJLabel.getAccessibleContext().setAccessibleName("iconJLabel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(JTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headerJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JTabbedPane))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void workClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workClicked
        try {
            Project p = UserControl.getCurrentProject();
            if (p.getTaken().isEmpty()) {
                throw new GUIException("Current project contains no tasks");
            }
            boolean taskAvailable = false;
            for (Taak t : p.getTaken()) {
                if (!t.overTijd()) {
                    taskAvailable = true;
                    break;
                }
            }
            if (!taskAvailable) {
                throw new GUIException("Current project contains no running tasks");
            }
            setVisible(false);
            WorkDialog work = new WorkDialog(this, true, validator);
            work.setVisible(true);
            setVisible(true);
            loadTaskInfo(tasksJList.getSelectedIndex());
            toggleButtonStates();
        } catch (GUIException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_workClicked

    private void addProjectJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProjectJButtonActionPerformed
        NewProjectDialog newProject = new NewProjectDialog(this, true, validator);
        newProject.setVisible(true);
        refreshProjectsList();
        refreshClientsList();
        clearFieldsOnPanel(projectsJPanel);
        clearFieldsOnPanel(clientsJPanel);
        toggleButtonStates();
    }//GEN-LAST:event_addProjectJButtonActionPerformed

    private void projectsJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_projectsJListValueChanged
        loadProjectInfo(projectsJList.getSelectedIndex());
        toggleButtonStates();
    }//GEN-LAST:event_projectsJListValueChanged

    private void loadProjectInfo(int index) {
        if (index != -1) {
            Project p = UserControl.getUser().getProjects().get(index);
            nameJTextField.setText(p.getNaam());
            startdateJTextField.setText(Clock.timestampToDateString(p.getBegindatum()));
            enddateJTextField.setText(Clock.timestampToDateString(p.getEinddatum()));
            try {
                clientJLabel.setText(UserControl.getUser().getOpdrachtgever(p.getOpdrachtgeverId()).toString());
            } catch (DataInputException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }

            refreshTasksList(p, projectTasksJList);
            percentageCompleteJProgressBar.setValue((int) (((Project) projectsJList.getSelectedValue()).getPercentageComplete() * 100));
        }
    }

    private void loadTaskInfo(int index) throws GUIException {
        if (index != -1) {
            Taak t = (Taak) tasksJList.getSelectedValue();
            taskNameJTextField.setText(t.getNaam());
            taskStartdateJTextField.setText(Clock.timestampToDateString(t.getBegindatum()));
            taskEnddateJTextField.setText(Clock.timestampToDateString(t.getGeschatteEinddatum()));
            taskCommentJTextArea.setText(t.getCommentaar());
            taskCompletedJCheckBox.setSelected(t.getCompleted());

            DefaultListModel listmodel = new DefaultListModel();

            for (Iterator<Tijdspanne> it = t.getGewerkteTijd().iterator(); it.hasNext();) {
                Tijdspanne ts = it.next();
                listmodel.addElement(ts);
            }

            workedTimeJList.setModel(listmodel);
            taskTotalTimeCompJLabel.setText("Total worked : " + Clock.longTimeToString(t.getTotaleWerktijd(), false));
            taskTotalPauseCompJLabel.setText("Total paused : " + Clock.longTimeToString(t.getTotalePauze(), false));
        }
    }

    private void loadClientInfo(int index) {
        if (index != -1) {
            Opdrachtgever o = (Opdrachtgever) clientsJList.getSelectedValue();
            clientNameJTextField.setText(o.getNaam());
            clientFirstNameJTextField.setText(o.getVoornaam());
            clientCompanyJTextField.setText(o.getBedrijfsnaam());
            clientEmailJTextField.setText(o.getEmail());
            clientPhoneNumberJTextField.setText(o.getTelefoonnummer());
        }
    }

    private void refreshProjectsList(JList... lists) {
        DefaultListModel listmodel = new DefaultListModel();

        for (Iterator<Project> it = UserControl.getUser().getProjects().iterator(); it.hasNext();) {
            Project p = it.next();
            listmodel.addElement(p);
        }

        for (JList list : lists) {
            list.setModel(listmodel);
            list.setCellRenderer(new ProjectCellRenderer());
            //!! is dit nodig?
            list.setSelectedIndex(-1);

        }
    }

    private void refreshTasksList(Project p, JList... lists) {
        for (JList list : lists) {
            DefaultListModel listmodel = new DefaultListModel();

            for (Iterator<Taak> it = p.getTaken().iterator(); it.hasNext();) {
                Taak t = it.next();
                listmodel.addElement(t);
            }

            list.setModel(listmodel);
            list.setCellRenderer(new TaskCellRenderer());
            list.setSelectedIndex(-1);
        }
    }

    private void refreshClientsList() {
        DefaultListModel listmodel = new DefaultListModel();

        for (Iterator<Opdrachtgever> it = UserControl.getUser().getOpdrachtgevers().iterator(); it.hasNext();) {
            Opdrachtgever o = it.next();
            listmodel.addElement(o);
        }
        clientsJList.setModel(listmodel);
        clientsJList.setSelectedIndex(-1);
    }

    private void clearFieldsOnPanel(JPanel panel) {
        Component[] clientPanelComps = panel.getComponents();
        for (Component c : clientPanelComps) {
            if (c instanceof JTextField) {
                ((JTextField) c).setText(null);
            }
        }
        if (panel.equals(projectsJPanel)) {
            projectTasksJList.setModel(new DefaultListModel());
            clientJLabel.setText(null);
        } else if (panel.equals(tasksJPanel)) {
            taskCommentJTextArea.setText(null);
            workedTimeJList.setModel(new DefaultListModel());
            taskCompletedJCheckBox.setSelected(false);
        }
    }

    private void toggleButtonStates() {
        boolean taskSelected = tasksJList.getSelectedIndex() != -1;
        boolean projectSelected = projectsJList.getSelectedIndex() != -1;
        boolean clientSelected = clientsJList.getSelectedIndex() != -1;
        saveTaskJButton.setEnabled(taskSelected);
        removeTaskJButton.setEnabled(taskSelected);
        setCurrentProjectJButton.setEnabled(projectSelected);
        saveProjectJButton.setEnabled(projectSelected);
        removeProjectJButton.setEnabled(projectSelected);
        saveClientJButton.setEnabled(clientSelected);
        removeClientJButton.setEnabled(clientSelected);
    }
    //testcomment gilliam is gay

    private void guiOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_guiOpened
        ingelogdJLabel.setText(UserControl.getUser().getGebruikersnaam());
        refreshProjectsList(projectsJList, homeProjectsJList);
        refreshClientsList();
    }//GEN-LAST:event_guiOpened

    private void editFieldsFocused(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_editFieldsFocused
        toggleButtonStates();
    }//GEN-LAST:event_editFieldsFocused

    private void clientsJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_clientsJListValueChanged
        loadClientInfo(clientsJList.getSelectedIndex());
        toggleButtonStates();
    }//GEN-LAST:event_clientsJListValueChanged

    private void addClientJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addClientJButtonActionPerformed
        NewClientDialog newClient = new NewClientDialog(this, true, validator);
        newClient.setVisible(true);
        refreshClientsList();
        clearFieldsOnPanel(clientsJPanel);
        toggleButtonStates();
    }//GEN-LAST:event_addClientJButtonActionPerformed

    private void saveClientJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveClientJButtonActionPerformed
        try {
            Opdrachtgever c = (Opdrachtgever) UserControl.getUser().getOpdrachtgevers().get(clientsJList.getSelectedIndex()).clone();
            c.setNaam(clientNameJTextField.getText());
            c.setVoornaam(clientFirstNameJTextField.getText());
            c.setBedrijfsnaam(clientCompanyJTextField.getText());
            c.setEmail(clientEmailJTextField.getText());
            c.setTelefoonnummer(clientPhoneNumberJTextField.getText());
            // Past opdrachtgeverwaarden aan in database
            Updater.updateOpdrachtgever(validator.getSessionKey(), c);
            JOptionPane.showMessageDialog(this, "Client edited!");
            UserControl.getUser().getOpdrachtgevers().set(clientsJList.getSelectedIndex(), c);
        } catch (DataInputException | IOException | WebserviceException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            refreshClientsList();
            clearFieldsOnPanel(clientsJPanel);
            toggleButtonStates();
        }
    }//GEN-LAST:event_saveClientJButtonActionPerformed

    private void saveProjectJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProjectJButtonActionPerformed
        try {
            Project p = (Project) UserControl.getUser().getProjects().get(projectsJList.getSelectedIndex()).clone();
            p.setNaam(nameJTextField.getText());
            p.setBegindatum(Clock.StringToTimestamp(startdateJTextField.getText()));
            p.setEinddatum(Clock.StringToTimestamp(enddateJTextField.getText()));
            // Past projectwaarden aan in database
            Updater.updateProject(validator.getSessionKey(), p);
            JOptionPane.showMessageDialog(this, "Project edited!");
            UserControl.getUser().getProjects().set(projectsJList.getSelectedIndex(), p);
        } catch (DataInputException | IOException | WebserviceException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            refreshProjectsList(projectsJList, homeProjectsJList);
            clearFieldsOnPanel(projectsJPanel);
            toggleButtonStates();
        }
    }//GEN-LAST:event_saveProjectJButtonActionPerformed

    private void saveTaskJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTaskJButtonActionPerformed
        try {
            Taak t = (Taak) UserControl.getCurrentProject().getTaken().get(tasksJList.getSelectedIndex()).clone();
            t.setNaam(taskNameJTextField.getText());
            long startdate = Clock.StringToTimestamp(taskStartdateJTextField.getText());
            long enddate = Clock.StringToTimestamp(taskEnddateJTextField.getText());
            t.setBegindatum(startdate);
            t.setGeschatteEinddatum(enddate);

            t.setCommentaar(taskCommentJTextArea.getText());
            t.setCompleted(taskCompletedJCheckBox.isSelected());
            // Taakwaarden worden aangepast in database
            Updater.updateTaak(validator.getSessionKey(), t);
            JOptionPane.showMessageDialog(this, "Task edited!");
            UserControl.getCurrentProject().getTaken().set(tasksJList.getSelectedIndex(), t);
            refreshTasksList(UserControl.getCurrentProject(), tasksJList);
        } catch (GUIException | DataInputException | IOException | WebserviceException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            clearFieldsOnPanel(tasksJPanel);
            clearFieldsOnPanel(projectsJPanel);
            toggleButtonStates();
            loadProjectInfo(projectsJList.getSelectedIndex());
        }
    }//GEN-LAST:event_saveTaskJButtonActionPerformed

    private void addTaskJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTaskJButtonActionPerformed
        try {
            NewTaskDialog addTaskDialog = new NewTaskDialog(this, true, validator);
            addTaskDialog.setVisible(true);
            refreshTasksList(UserControl.getCurrentProject(), tasksJList);
        } catch (GUIException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            //!! is dit nodig?
            // refreshProjectsList(projectsJList, homeProjectsJList);
            clearFieldsOnPanel(tasksJPanel);
            loadProjectInfo(projectsJList.getSelectedIndex());
        }
    }//GEN-LAST:event_addTaskJButtonActionPerformed

    private void tasksJListprojectListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_tasksJListprojectListValueChanged
        try {
            loadTaskInfo(tasksJList.getSelectedIndex());
        } catch (GUIException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        toggleButtonStates();
    }//GEN-LAST:event_tasksJListprojectListValueChanged

    private void removeProjectJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeProjectJButtonActionPerformed
        int result = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this project?", null, JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            try {
                Project p = UserControl.getUser().getProjects().get(projectsJList.getSelectedIndex());
                Deleter.deleteProject(validator.getSessionKey(), p);
                UserControl.getUser().removeProject((Project) projectsJList.getSelectedValue());
                refreshProjectsList(projectsJList, homeProjectsJList);
                clearFieldsOnPanel(projectsJPanel);
                toggleButtonStates();
                JOptionPane.showMessageDialog(this, "Project removed!");
            } catch (IOException | WebserviceException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }//GEN-LAST:event_removeProjectJButtonActionPerformed

    private void removeClientJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeClientJButtonActionPerformed
        int result = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this client?", null, JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            try {
                Opdrachtgever c = UserControl.getUser().getOpdrachtgever(((Opdrachtgever) clientsJList.getSelectedValue()).getID());
                //!! Deze for-lus moet verwijderd worden en vervangen worden door een error van de server
                for (Project p : UserControl.getUser().getProjects()) {
                    if (p.getOpdrachtgeverId() == c.getID()) {
                        throw new GUIException("This client is associated with a project");
                    }
                }
                Deleter.deleteOpdrachtgever(validator.getSessionKey(), c);
                UserControl.getUser().getOpdrachtgevers().remove(c);
                refreshClientsList();
                clearFieldsOnPanel(clientsJPanel);
                toggleButtonStates();
                JOptionPane.showMessageDialog(this, "Client removed!");
            } catch (GUIException | DataInputException | IOException | WebserviceException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }

    }//GEN-LAST:event_removeClientJButtonActionPerformed

    private void setCurrentProjectJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setCurrentProjectJButtonActionPerformed
        try {
            UserControl.setCurrentProjectIndex(projectsJList.getSelectedIndex());
            currentProjectJLabel.setText("Current project: " + UserControl.getCurrentProject().getNaam());
            addTaskJButton.setText("Add Task to " + UserControl.getCurrentProject().getNaam());
            refreshProjectsList(projectsJList, homeProjectsJList);
            refreshTasksList(UserControl.getCurrentProject(), tasksJList);
            clearFieldsOnPanel(tasksJPanel);
        } catch (GUIException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_setCurrentProjectJButtonActionPerformed

    private void homeProjectsJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_homeProjectsJListValueChanged
        if (homeProjectsJList.getSelectedIndex() != -1) {
            refreshTasksList(UserControl.getUser().getProject(homeProjectsJList.getSelectedIndex()), homeTasksJList);
        } else {
            try {
                refreshTasksList(UserControl.getCurrentProject(), homeTasksJList);
            } catch (GUIException ex) {
            }
        }
    }//GEN-LAST:event_homeProjectsJListValueChanged

    private void homeProjectsJListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_homeProjectsJListKeyReleased
        if (evt.getKeyCode() == 10) {
            UserControl.setCurrentProjectIndex(homeProjectsJList.getSelectedIndex());
            refreshProjectsList(homeProjectsJList);
            try {
                refreshTasksList(UserControl.getCurrentProject(), tasksJList);
            } catch (GUIException ex) {
            }
        }
    }//GEN-LAST:event_homeProjectsJListKeyReleased

    private void removeTaskJButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int result = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this task?", null, JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            try {
                Taak t = UserControl.getCurrentProject().getTaken().get(tasksJList.getSelectedIndex());
                Deleter.deleteTaak(validator.getSessionKey(), t);
                UserControl.getCurrentProject().getTaken().remove(t);
                refreshTasksList(UserControl.getCurrentProject(), tasksJList);
                clearFieldsOnPanel(tasksJPanel);
                toggleButtonStates();
                JOptionPane.showMessageDialog(this, "Task removed!");
            } catch (GUIException | IOException | WebserviceException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel HomeProjectsJLabel;
    private javax.swing.JTabbedPane JTabbedPane;
    private javax.swing.JLabel TasksJLabel;
    private javax.swing.JButton addClientJButton;
    private javax.swing.JButton addProjectJButton;
    private javax.swing.JButton addTaskJButton;
    private javax.swing.JTextField clientCompanyJTextField;
    private javax.swing.JTextField clientEmailJTextField;
    private javax.swing.JTextField clientFirstNameJTextField;
    private javax.swing.JLabel clientJLabel;
    private javax.swing.JTextField clientNameJTextField;
    private javax.swing.JTextField clientPhoneNumberJTextField;
    private javax.swing.JLabel clientcompJLabel1;
    private javax.swing.JLabel clientsJLabel;
    private javax.swing.JList clientsJList;
    private javax.swing.JPanel clientsJPanel;
    private javax.swing.JLabel clockJLabel;
    private javax.swing.JLabel companyJLabel;
    private javax.swing.JLabel currentProjectJLabel;
    private javax.swing.JLabel emailJLabel;
    private javax.swing.JTextField enddateJTextField;
    private javax.swing.JLabel enddatecompJLabel1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JLabel firstNameJLabel;
    private javax.swing.JPanel headerJPanel;
    private javax.swing.JLabel homeJLabel;
    private javax.swing.JPanel homeJPanel;
    private javax.swing.JList homeProjectsJList;
    private javax.swing.JList homeTasksJList;
    private javax.swing.JLabel ingelogdJLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel nameJLabel;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JLabel namecompJLabel;
    private javax.swing.JPanel optionsJPanel;
    private javax.swing.JProgressBar percentageCompleteJProgressBar;
    private javax.swing.JLabel percentageCompletecompJLabel;
    private javax.swing.JLabel phoneNumberJLabel;
    private javax.swing.JList projectTasksJList;
    private javax.swing.JLabel projectsJLabel;
    private javax.swing.JList projectsJList;
    private javax.swing.JPanel projectsJPanel;
    private javax.swing.JButton removeClientJButton;
    private javax.swing.JButton removeProjectJButton;
    private javax.swing.JButton removeTaskJButton;
    private javax.swing.JButton saveClientJButton;
    private javax.swing.JButton saveProjectJButton;
    private javax.swing.JButton saveTaskJButton;
    private javax.swing.JLabel scheduleJLabel;
    private javax.swing.JPanel scheduleJPanel;
    private javax.swing.JButton setCurrentProjectJButton;
    private javax.swing.JLabel settingsJLabel;
    private javax.swing.JTextField startdateJTextField;
    private javax.swing.JLabel startdatecompJLabel;
    private javax.swing.JLabel taskCommentCompJLabel;
    private javax.swing.JTextArea taskCommentJTextArea;
    private javax.swing.JCheckBox taskCompletedJCheckBox;
    private javax.swing.JLabel taskCompletedJLabel;
    private javax.swing.JTextField taskEnddateJTextField;
    private javax.swing.JTextField taskNameJTextField;
    private javax.swing.JTextField taskStartdateJTextField;
    private javax.swing.JLabel taskTotalPauseCompJLabel;
    private javax.swing.JLabel taskTotalTimeCompJLabel;
    private javax.swing.JLabel taskWorkedTimeCompJLabel;
    private javax.swing.JLabel taskenddateCompJLabel;
    private javax.swing.JLabel tasknameCompJLabel;
    private javax.swing.JLabel tasksJLabel;
    private javax.swing.JList tasksJList;
    private javax.swing.JPanel tasksJPanel;
    private javax.swing.JLabel taskscompJLabel;
    private javax.swing.JLabel taskstartdateCompJLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton workJButton;
    private javax.swing.JList workedTimeJList;
    // End of variables declaration//GEN-END:variables
}